{"version":3,"sources":["Counter/Counter.module.css","Counter/ValuesForCounter/ValuesForCounter.module.css","Counter/Number/Number.module.css","Counter/Buttons/Button.module.css","Counter/Number/Number.jsx","Counter/ValuesForCounter/ValuesForCounter.jsx","Counter/Buttons/Button.jsx","Counter/Counter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Number","render","currentValue","props","maxValue","startValue","styles","equalMax","className","React","Component","ValuesForCounter","onChangeMaxValue","e","changeMaxValue","currentTarget","value","onChangeStartValue","changeStartValue","valueBlock","incorrectValues","valueInput","type","min","onChange","Button","disabled","isDisable","onClick","callBack","id","button","name","Counter","state","isSetDisabled","isIncDisabled","isResetDisabled","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","setState","inc","reset","set","enterValuesAndPressSet","incorrectValue","callMethodsOnValueChanged","blockForFlex","mainBlocks","buttonsContainer","this","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa4a3129.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockForFlex\":\"Counter_blockForFlex__1ZPYE\",\"mainBlocks\":\"Counter_mainBlocks__xJH61\",\"buttonsContainer\":\"Counter_buttonsContainer__2FiCF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"valueBlock\":\"ValuesForCounter_valueBlock__2NRMj\",\"valueInput\":\"ValuesForCounter_valueInput__1KFbf\",\"incorrectValues\":\"ValuesForCounter_incorrectValues__H2HPa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentValue\":\"Number_currentValue__26ELe\",\"equalMax\":\"Number_equalMax__4v6oc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1lMZn\"};","import React from \"react\";\nimport styles from \"./Number.module.css\";\n\nclass Number extends React.Component {\n\n    render = () => {\n\n        const currentValue = (this.props.currentValue === this.props.maxValue)\n        || (this.props.startValue >= this.props.maxValue)\n            ? styles.equalMax : \"\";\n\n        return (\n            <div className={styles.currentValue + \" \" + currentValue}>\n                {this.props.currentValue}\n            </div>\n        );\n    };\n}\n\nexport default Number;\n","import React from \"react\";\nimport styles from \"./ValuesForCounter.module.css\";\n\nclass ValuesForCounter extends React.Component {\n\n    onChangeMaxValue = (e) => {\n        this.props.changeMaxValue(Number(e.currentTarget.value));\n    };\n\n    onChangeStartValue = (e) => {\n        this.props.changeStartValue(Number(e.currentTarget.value));\n    };\n\n    render = () => {\n\n        const valueBlock = (this.props.startValue >= this.props.maxValue)\n            ? styles.incorrectValues : \"\";\n\n        return (\n            <div className={styles.valueBlock}>\n                <div>\n                    max value: <input\n                    className={styles.valueInput + \" \" + valueBlock}\n                    type=\"number\"\n                    min=\"1\"\n                    value={this.props.maxValue}\n                    onChange={this.onChangeMaxValue}\n                />\n                </div>\n                <div>\n                    start value: <input\n                    className={styles.valueInput + \" \" + valueBlock}\n                    type=\"number\"\n                    min=\"0\"\n                    value={this.props.startValue}\n                    onChange={this.onChangeStartValue}\n                />\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default ValuesForCounter;\n","import React from \"react\";\r\nimport styles from \"./Button.module.css\";\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <div>\r\n            <button disabled={props.isDisable} onClick={props.callBack} id={props.id} className={styles.button}>\r\n                {props.name}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from \"react\";\nimport styles from \"./Counter.module.css\";\nimport Number from \"./Number/Number\";\nimport ValuesForCounter from \"./ValuesForCounter/ValuesForCounter\";\nimport Button from \"./Buttons/Button\";\n\nclass Counter extends React.Component {\n\n    state = {\n        startValue: 0,\n        maxValue: 5,\n        currentValue: 0,\n        isSetDisabled: true,\n        isIncDisabled: false,\n        isResetDisabled: true,\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem(\"our-state\", stateAsString);\n    };\n\n    restoreState = () => {\n        //объявляем наш стартовый стейт\n        let state = {\n            startValue: 0,\n            maxValue: 5,\n            currentValue: 0,\n            isSetDisabled: true,\n            isIncDisabled: false,\n            isResetDisabled: true,\n        };\n\n        let stateAsString = localStorage.getItem(\"our-state\");\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        //устанавливаем стейт (либо пустой, либо востановленный) в стейт\n        this.setState(state);\n    };\n\n    inc = () => {\n        if (this.state.currentValue < this.state.maxValue) {\n            this.setState({\n                currentValue: this.state.currentValue + 1,\n                isResetDisabled: false,\n            }, () => {\n                this.isIncDisabled();\n                this.saveState();\n            });\n        }\n    };\n\n    isIncDisabled = () => {\n        if (this.state.currentValue === this.state.maxValue) {\n            this.setState({\n                isIncDisabled: true,\n            }, () => {\n                this.saveState();\n            });\n        }\n    };\n\n    reset = () => {\n        this.setState({\n            currentValue: this.state.startValue,\n            isResetDisabled: true,\n            isIncDisabled: false,\n        }, () => {\n            this.saveState();\n        });\n    };\n\n    set = () => {\n        this.setState({\n            currentValue: this.state.startValue,\n            isSetDisabled: true,\n            isIncDisabled: false,\n        }, () => {\n            this.saveState();\n        });\n    };\n\n    isSetDisabled = () => {\n        this.setState({\n            isSetDisabled: false,\n        }, () => {\n            this.saveState();\n        });\n    };\n\n    enterValuesAndPressSet = () => {\n        this.setState({\n            isResetDisabled: true,\n            isIncDisabled: true,\n            currentValue: \"Enter values and press 'set'\"\n        }, () => {\n            this.saveState();\n        });\n    };\n\n    incorrectValue = () => {\n        if (this.state.startValue >= this.state.maxValue)\n            this.setState({\n                isSetDisabled: true,\n                currentValue: \"Incorrect value!\"\n            }, () => {\n                this.saveState();\n            });\n    };\n\n    callMethodsOnValueChanged = () => {\n        this.isSetDisabled();\n        this.enterValuesAndPressSet();\n        this.incorrectValue();\n        this.saveState();\n    };\n\n    changeMaxValue = (value) => {\n        this.setState({\n            maxValue: value,\n        }, () => {\n            this.callMethodsOnValueChanged();\n        });\n    };\n\n    changeStartValue = (value) => {\n        this.setState({\n            startValue: value,\n        }, () => {\n            this.callMethodsOnValueChanged();\n        });\n    };\n\n    render = () => {\n\n        return (\n            <div className={styles.blockForFlex}>\n                <div className={styles.mainBlocks}>\n                    <ValuesForCounter\n                        maxValue={this.state.maxValue}\n                        startValue={this.state.startValue}\n                        changeMaxValue={this.changeMaxValue}\n                        changeStartValue={this.changeStartValue}\n                    />\n                    <div className={styles.buttonsContainer}>\n                        <Button\n                            name=\"set\"\n                            callBack={this.set}\n                            isDisable={this.state.isSetDisabled}/>\n                    </div>\n                </div>\n                <div className={styles.mainBlocks}>\n                    <Number\n                        startValue={this.state.startValue}\n                        currentValue={this.state.currentValue}\n                        maxValue={this.state.maxValue}/>\n                    <div className={styles.buttonsContainer}>\n                        <Button\n                            name=\"inc\"\n                            callBack={this.inc}\n                            isDisable={this.state.isIncDisabled}/>\n                        <Button\n                            name=\"reset\"\n                            callBack={this.reset}\n                            isDisable={this.state.isResetDisabled}/>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Counter;\n","import React from \"react\";\nimport \"./App.css\";\nimport Counter from \"./Counter/Counter\";\n\nclass App extends React.Component {\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <Counter/>\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}